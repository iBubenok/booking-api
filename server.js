// server.js
"use strict";

require('dotenv').config({ quiet: true });

const express = require('express');
const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');
const swaggerUi = require('swagger-ui-express');
const helmet = require('helmet');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
const morgan = require('morgan');
const { Pool } = require('pg');

const app = express();

// –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ –ø—Ä–æ–∫—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Render),
// —ç—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å IP –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è rate limit –∏ –ª–æ–≥–æ–≤).
app.set('trust proxy', 1);

// ---------- Security & DX middleware ----------
app.disable('x-powered-by');
app.use(
  helmet({
    // —á—Ç–æ–±—ã Swagger UI –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≥—Ä—É–∑–∏–ª –∞—Å—Å–µ—Ç—ã
    crossOriginResourcePolicy: { policy: 'cross-origin' },
  })
);
app.use(cors());
app.use(express.json({ limit: '32kb' }));
app.use(morgan('combined'));

// ---------- Swagger UI (/docs) ----------
const openapiPath = path.resolve(__dirname, './openapi.yaml');
try {
  const openapiDoc = yaml.load(fs.readFileSync(openapiPath, 'utf8'));
  app.use('/docs', swaggerUi.serve, swaggerUi.setup(openapiDoc));
} catch {
  // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–¥–Ω–∏–º–∞–µ–º /docs, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  console.warn('openapi.yaml not found or invalid. /docs will be unavailable.');
}

// ---------- Database ----------
const hasDb = !!process.env.DATABASE_URL;
let pool = null;
if (hasDb) {
  const pgConfig = { connectionString: process.env.DATABASE_URL };
  // –í–∫–ª—é—á–∞–µ–º SSL –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Neon/–æ–±–ª–∞—á–Ω—ã–µ –ë–î)
  if ((process.env.DATABASE_SSL || '').toLowerCase() === 'true') {
    pgConfig.ssl = { rejectUnauthorized: false };
  }
  pool = new Pool(pgConfig);
}

// ---------- Health checks ----------
app.get('/health', (req, res) => {
  // –õ—ë–≥–∫–∏–π health –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 200 OK –¥–ª—è Render
  res.json({ status: 'ok', db: hasDb ? 'configured' : 'not-configured' });
});

app.get('/health/db', async (req, res) => {
  if (!hasDb) return res.status(503).json({ status: 'no-db' });
  try {
    await pool.query('SELECT 1');
    res.json({ status: 'ok' });
  } catch {
    res.status(503).json({ status: 'db-down' });
  }
});

// ---------- Home ----------
app.get('/', (req, res) => {
  res.type('html').send(`
    <!doctype html>
    <html lang="ru">
    <head>
      <meta charset="utf-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <title>Booking API</title>
      <style>
        body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; margin: 2rem; line-height: 1.5; }
        code, pre { background: #f5f5f5; padding: 0.2rem 0.4rem; border-radius: 6px; }
        .links a { display: inline-block; margin-right: 1rem; }
        .card { border: 1px solid #e5e7eb; border-radius: 12px; padding: 1rem 1.25rem; max-width: 760px; }
      </style>
    </head>
    <body>
      <div class="card">
        <h1>Booking API</h1>
        <p>–î–µ–º–æ-—Å–µ—Ä–≤–∏—Å –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –æ–¥–Ω–∞ –±—Ä–æ–Ω—å, –±–µ–∑ –æ–≤–µ—Ä–±—É–∫–∏–Ω–≥–∞.</p>
        <p class="links">
          <a href="/docs">‚û° Swagger UI (/docs)</a>
          <a href="/health">‚ù§Ô∏è Health (/health)</a>
          <a href="/health/db">üß° Health DB (/health/db)</a>
        </p>
        <p>–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: <code>POST /api/bookings/reserve</code></p>
      </div>
    </body>
    </html>
  `);
});

// ---------- Rate limiters ----------
const reserveLimiter = rateLimit({
  windowMs: 60_000, // 1 –º–∏–Ω—É—Ç–∞
  max: 30,          // –Ω–µ –±–æ–ª–µ–µ 30 –ø–æ–ø—ã—Ç–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–¥–Ω–æ–≥–æ IP –≤ –º–∏–Ω—É—Ç—É
  standardHeaders: true,
  legacyHeaders: false,
});

// ---------- Booking ----------
app.post('/api/bookings/reserve', reserveLimiter, async (req, res) => {
  if (!hasDb) {
    return res.status(503).json({ error: 'Database is not configured yet. Set DATABASE_URL.' });
  }

  const { event_id, user_id } = req.body || {};

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–∞
  const eid = Number(event_id);
  const uid = String(user_id || '').trim();

  if (!Number.isInteger(eid) || eid <= 0 || uid.length === 0) {
    return res
      .status(400)
      .json({ error: 'Invalid payload: {event_id(int>0), user_id(non-empty string)} required' });
  }
  // –ë–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è user_id, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –º—É—Å–æ—Ä/—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
  if (uid.length > 128 || !/^[\w\-.:@]+$/.test(uid)) {
    return res
      .status(400)
      .json({ error: 'Invalid user_id format (max 128, allowed: letters/digits/_ - . : @)' });
  }

  let client;
  try {
    client = await pool.connect();
    await client.query('BEGIN');

    // 1) –õ–æ—á–∏–º —Å–æ–±—ã—Ç–∏–µ ‚Äî —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∫–æ–Ω–∫—É—Ä–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É event_id
    const ev = await client.query(
      'SELECT id, name, total_seats FROM events WHERE id = $1 FOR UPDATE',
      [eid]
    );
    if (ev.rowCount === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Event not found' });
    }
    const event = ev.rows[0];
    const totalSeats = Number(event.total_seats);

    // 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const dup = await client.query(
      'SELECT 1 FROM bookings WHERE event_id = $1 AND user_id = $2',
      [eid, uid]
    );
    if (dup.rowCount > 0) {
      await client.query('ROLLBACK');
      return res.status(409).json({ error: 'User already booked this event' });
    }

    // 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –º–µ—Å—Ç–∞
    const takenRes = await client.query(
      'SELECT COUNT(*)::int AS cnt FROM bookings WHERE event_id = $1',
      [eid]
    );
    const taken = Number(takenRes.rows[0].cnt);
    if (taken >= totalSeats) {
      await client.query('ROLLBACK');
      return res.status(409).json({ error: 'Event is sold out' });
    }

    // 4) –í—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–æ–Ω—å
    const ins = await client.query(
      'INSERT INTO bookings (event_id, user_id, created_at) VALUES ($1, $2, NOW()) RETURNING id, event_id, user_id, created_at',
      [eid, uid]
    );

    await client.query('COMMIT');

    // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Location-–∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ /api/bookings/:id)
    res.status(201).json({
      booking: ins.rows[0],
      seats_left: totalSeats - (taken + 1),
    });
  } catch (err) {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–∞—Ç–∏—Ç—å
    try {
      if (client) await client.query('ROLLBACK');
    } catch {}
    // –ù–∞—Ä—É—à–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –≤ –ë–î –µ—Å—Ç—å UNIQUE (event_id, user_id) –∏ —Å–ª—É—á–∏–ª–∞—Å—å –≥–æ–Ω–∫–∞)
    if (err && err.code === '23505') {
      return res.status(409).json({ error: 'User already booked this event' });
    }
    console.error(err);
    return res.status(500).json({ error: 'Internal error' });
  } finally {
    if (client) client.release();
  }
});

// ---------- Fallback 404 ----------
app.use((req, res, next) => {
  if (req.path === '/') return next();
  res.status(404).json({ error: 'Not found' });
});

// ---------- Start & Graceful shutdown ----------
const port = Number(process.env.PORT) || 3000;
const host = '0.0.0.0';

let server = null;
if (process.env.NODE_ENV !== 'test') {
  server = app.listen(port, host, () => {
    console.log(`Server listening on http://${host}:${port}`);
  });
}

async function shutdown(signal) {
  console.log(`\n${signal}: shutting down...`);
  try {
    await pool?.end();
  } catch {}
  if (server) {
    server.close(() => process.exit(0));
  } else {
    process.exit(0);
  }
}
['SIGTERM', 'SIGINT'].forEach((s) => process.on(s, () => shutdown(s)));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –º–æ–ª—á–∞
process.on('unhandledRejection', (reason) => {
  console.error('Unhandled Rejection:', reason);
});
process.on('uncaughtException', (err) => {
  console.error('Uncaught Exception:', err);
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äî –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
module.exports = { app, server };
